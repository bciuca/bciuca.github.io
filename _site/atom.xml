<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>devbog</title>
 <link href="http://bciuca.com/" rel="self"/>
 <link href="http://bciuca.com"/>
 <updated>2013-04-11T16:40:30-07:00</updated>
 <id>http://bciuca.com</id>
 <author>
   <name>Bogdan Ciuca</name>
   <email>b@bciuca.com</email>
 </author>

 
 <entry>
   <title>Using Multiple GitHub Accounts</title>
   <link href="http://bciuca.com/dev/2013/04/10/using-multiple-github-accounts"/>
   <updated>2013-04-10T00:00:00-07:00</updated>
   <id>http://bciuca.com/dev/2013/04/10/using-multiple-github-accounts</id>
   <content type="html">&lt;h4 id='why_would_you_need_more_than_one_github_account'&gt;Why would you need more than one GitHub account?&lt;/h4&gt;

&lt;p&gt;Ideally, having a single GitHub account with contributions to multiple organizations would be the simplest way. As it turns out, my current job came with a separate GitHub account. So now I have two GitHub accounts, one for personal projects and another for work. The problem I was running into was trying to keep my commits tied with the right GitHub ssh key. Luckily, git and ssh are configurable enough to get this sorted out.&lt;/p&gt;

&lt;p&gt;Through some simple googling, I found &lt;a href='http://net.tutsplus.com/tutorials/tools-and-tips/how-to-work-with-github-and-multiple-accounts/'&gt;Jeffery Way&amp;#8217;s blog post&lt;/a&gt;. The steps I outlined below is what I did to get this setup on my Mac. More details can be found on Jeffery&amp;#8217;s blog.&lt;/p&gt;

&lt;p&gt;The following steps assume that you already have an existing key you use with one of your github accounts. For the purpose of this writeup, the default &lt;code&gt;id_rsa&lt;/code&gt; key is associated with your personal GitHub account.&lt;/p&gt;

&lt;h4 id='creating_and_adding_ssh_keys'&gt;Creating and adding ssh keys&lt;/h4&gt;

&lt;p&gt;A ssh key will be needed to use with the work GitHub account. In your &lt;code&gt;~/.ssh&lt;/code&gt; directory, run the following ssh command: &lt;code&gt;ssh-keygen -t rsa -C &amp;quot;me@mycompany.com&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Rename the key to something else, for this example I went with, &lt;code&gt;id_rsa_mycompany&lt;/code&gt; and &lt;code&gt;id_rsa_mycompany.pub&lt;/code&gt; (private and public keys respectively).&lt;/p&gt;

&lt;p&gt;Add the key to ssh: &lt;code&gt;ssh-add ~/.ssh/id_rsa_mycompany&lt;/code&gt;&lt;/p&gt;

&lt;h4 id='setting_up_github_with_your_new_ssh_key'&gt;Setting up GitHub with your new ssh key&lt;/h4&gt;

&lt;p&gt;Now add the new public key to the work GitHub account (this will be under your GitHub account settings). Open the &lt;code&gt;id_rsa_mycompany.pub&lt;/code&gt; public key file in a text editor and copy the text. Or just copy directly from the terminal: &lt;code&gt;cat ~/.ssh/id_rsa_mycompany.pub | pbcopy&lt;/code&gt;&lt;/p&gt;

&lt;h4 id='configuring_ssh'&gt;Configuring ssh&lt;/h4&gt;

&lt;p&gt;Configure ssh host names to use for work and personal. The config file is in &lt;code&gt;~/.ssh/config&lt;/code&gt; or you can create one if needed: &lt;code&gt;touch ~/.ssh/config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first host is the personal account and the second entry is for the work account. You can name the &lt;code&gt;Hostname&lt;/code&gt; whatever you like. &lt;pre&gt;
    &lt;code&gt;
        Host github.com 
           Hostname github.com 
           User git 
           IdentityFile ~/.ssh/id_rsa
        Host github-mycompany
           Hostname github.com
           User git
           IdentityFile ~/.ssh/id_rsa_mycompany
    &lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;h4 id='configuring_git_repo'&gt;Configuring git repo&lt;/h4&gt;

&lt;p&gt;Configure your git repo settings to use the configured ssh hostnames. The config file can be found in the &lt;code&gt;.git&lt;/code&gt; directory of your git repo. &lt;pre&gt;
    &lt;code&gt;
        [core]
           repositoryformatversion = 0
           filemode = true
           bare = false
           logallrefupdates = true
           ignorecase = true
        [remote &quot;origin&quot;]
           fetch = +refs/heads/*:refs/remotes/origin/*
           url = git@github-mycompany:OrgName/corporate-stuff.git
        [branch &quot;xdev&quot;]
           remote = origin
           merge = refs/heads/xdev
        [user]
           email = me@mycompany.com
    &lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;While you can have global git user prefences set, such as email, I configured my email in the project git config to use my work address.&lt;/p&gt;

&lt;p&gt;For my personal repo, I just use my default global user settings and the usual git ssh addresses (i.e. git@github.com). So there is really nothing more to add to your other git config unless you need further customization.&lt;/p&gt;

&lt;h4 id='testing_it_out'&gt;Testing it out&lt;/h4&gt;

&lt;p&gt;To test that the keys were added ok, you can run the following ssh commands.&lt;/p&gt;
&lt;pre&gt;
    &lt;code&gt;
        ssh -T git@github.com
        Hi bciuca! You've successfully authenticated, but GitHub does not provide shell access.

        ssh -T git@github-mycompany
        Hi bciuca-mycompany! You've successfully authenticated, but GitHub does not provide shell access.
    &lt;/code&gt;
&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Hello Mars</title>
   <link href="http://bciuca.com/test/2013/04/10/hello-mars"/>
   <updated>2013-04-10T00:00:00-07:00</updated>
   <id>http://bciuca.com/test/2013/04/10/hello-mars</id>
   <content type="html">&lt;p&gt;Hello Mars! This is a test page. Yay.&lt;/p&gt;</content>
 </entry>
 
 
</feed>